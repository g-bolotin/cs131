#!/bin/bash

# Created by Galit Bolotin (galit.bolotin@sjsu.edu)
# Last Editted: March 11th, 2025

# Program that can act as a stopwatch, countdown timer, and can time a command's execution.

# Uses these cmdline args:
#   start = start stopwatch
#   stop = stop stopwatch
#   #s, #m, or #h starts a countdown for # of seconds, minutes, or hours
#   run <command> = executes the command and measures time taken

# Stopwatch mode
# Format: timeme start
if [[ "$1" = "start" ]]; then
	date +%s > /tmp/timeme_start
	echo "Starting stopwatch!"

# Stopwatch should be started before it can be stopped.
# Uses temp file to track start time (only 1 timer per start/stop at the moment)
elif [[ "$1" = "stop" ]]; then
	if [[ ! -f /tmp/timeme_start ]]; then
		echo -e "\e[91mStopwatch must be started in order to be stopped. Use 'timeme.sh start' first!\e[0m"
		exit 1
	
	else
		start_time=$(cat /tmp/timeme_start)
		end_time=$(date "+%s")
		elapsed=$(($end_time - $start_time))
		echo -e "\e[91mStopwatch stopped!\e[0m Elapsed time: $((elapsed/3600))h $(((elapsed%3600)/60))m $((elapsed%60))s"
		rm /tmp/timeme_start # clean up temp file
	fi

# Command timer mode
# Benchmark: perform the command multiple times, then give average time
# Formats: 
#   timeme run -bX "command" 
#   timeme run --benchmark=X "command"
# Example: timeme run -b5 "ls -a" will run the command 5 times.
elif [[ "$1" = "run" ]]; then

	# select arg to evaluate: $2 for plain run, $3 for run with benchmark
	to_run="$2"
	num_runs=1 # run command 1 time by default
	if [[ "$2" =~ ^-b[1-9]+$ ]]; then
    		num_runs="${2:2}"  # Extract everything after "-b"
		to_run="$3"
	elif [[ "$2" =~ ^--benchmark=[1-9]+$ ]]; then
    		num_runs="${2#*=}"  # Extract everything after "="
		to_run="$3"
	elif [[ "$2" = "--benchmark" || "$2" = "-b" ]]; then
		echo -e "\e[91mInvalid input:\e[0m run option must follow -b# or --benchmark=# format."
		exit 1
	fi

	# Check if number of runs >0 -- doesn't make sense to time something that didn't run
	if [[ $num_runs -le 0 ]]; then
		echo -e "\e[91mInvalid input:\e[0m number of runs must be greater than zero."
		exit 1
	fi

	# generate sequence of numbers from 1 to num_runs (run cmd 1 to num_runs times)
	for i in $(seq 1 "$num_runs"); do

		date +%s.%N > /tmp/timeme_start	# time in seconds.milliseconds
		start_time=$(cat /tmp/timeme_start)

		eval "$to_run" # run the command passed in after the 'run' argument
	
	        end_time=$(date "+%s.%N")
		times[i]=$(echo "$end_time - $start_time" | bc)
	done

	# Calculate total time elapsed
	elapsed=0
	for time in "${times[@]}"; do
		elapsed=$(echo "scale=9; $elapsed + $time" | bc)  # pass into bc to handle floating pt (for ns)
	done

	elapsed_sec=$(echo "$elapsed" | cut -d. -f1) # get position before . (seconds)
	elapsed_ns=$(echo "$elapsed" | cut -d. -f2) # get position after . (ns)
	elapsed_hr=$((elapsed_sec/3600))
	elapsed_min=$(((elapsed_sec%3600)/60))
	elapsed_sec=$((elapsed_sec%60))

      	# Displays times in Xh Xm Xs Xms format.
	# When displaying ns, gets rid of leading 0s by using the arithmetic
	# expander. Does essentially nothing by convering from base 10 to
        # base 10, but the arithmetic expansion will trim leading 0s from any numbers.
	echo -e "\e[91mCommand run ${num_runs} times.\e[0m Elapsed time: ${elapsed_hr}h ${elapsed_min}m ${elapsed_sec}s $((10#${elapsed_ns}))ns"
        	
	# Calculate average times if running with benchmark
	if [[ $num_runs -gt 1 ]]; then
		avg=$(echo "scale=9; $elapsed / $num_runs" | bc)
		avg_sec=$(echo "$avg" | cut -d. -f1)
		avg_ns=$(echo "$avg" | cut -d. -f2)
		avg_hr=$((avg_sec/3600))
		avg_min=$(((avg_sec%3600)/60))
		avg_sec=$((avg_sec%60))
		echo -e "\e[91mAverage runtime:\e[0m ${avg_hr}h ${avg_min}m ${avg_sec}s $((10#${avg_ns}))ns"
	fi

	rm /tmp/timeme_start # clean up temp file

# Countdown timer mode
# Typical Formats:
#   timeme Xh Xm Xs
#   timeme Xm Xs
#   timeme Xs
# Order doesn't matter, as long as the times are marked with h, m, or s
# Can also do multiple arguments with times (ex. timeme 5s 5s). They'll be summed together.
else
	# Any arg ending with h, m, and/or s will be added to the total time.
	# h = hours, m = minutes, s = seconds

	total_sec=0
	for arg in "$@"; do
		num=${arg%[hms]} # extract number
		if [[ $arg = *h ]]; then
			total_sec=$(($total_sec + num * 3600))
		elif [[ $arg = *m ]]; then
			total_sec=$(($total_sec + num * 60))
		elif [[ $arg = *s ]]; then
			total_sec=$(($total_sec + num))
		else
			echo -e "\e[91mInvalid input:\e[0m $arg"
			exit 1
		fi
	done

	if [[ $total_sec -gt 0 ]]; then
		echo "Starting countdown for $*... (CTRL+C to cancel)"
		sleep $total_sec
		echo -e "\e[91mTime's up!\e[0m"
	else
		echo -e "\e[91mInvalid input:\e[0m Timer cannot be zero or empty!"
	fi
fi
